// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Trip {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  location Location
  startDate DateTime @default(now())
  endDate DateTime
  image Photo?
  activities Activity[]
  participants TripMember[]
  notifications Notification[] @relation("TripNotifications")
}

model TripMember {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  tripId   String @db.ObjectId
  inviteeId   String @db.ObjectId
  inviterId String @db.ObjectId
  status   Status @default(PENDING)
  
  trip     Trip @relation(fields: [tripId], references: [id])
  invitee  User? @relation("InviteeToTripInvitations", fields: [inviteeId], references: [id])
  inviter  User? @relation("InviterToTripInvitations", fields: [inviterId], references: [id])

  @@unique([tripId, inviteeId])
}


type Location {
  address String
  citystate String @default("")
  latitude Float
  longitude Float
  radius Float
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userName String @unique
  email String @unique
  password String
  firstName String
  lastName String
  dateOfBirth DateTime
  avatar Photo
  notificationsReceived Notification[] @relation("NotificationReceiver")
  notificationsSent Notification[] @relation("NotificationSender")
  inviteeTripInvitations TripMember[] @relation("InviteeToTripInvitations")
  inviterTripInvitations TripMember[] @relation("InviterToTripInvitations") 
  friendRequestSent  Friendship[]   @relation("friendRequestSent")
  friendRequestReceived   Friendship[]   @relation("friendRequestReceived")
}

model Notification {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  type NotificationType
  senderId String @db.ObjectId
  sender User @relation("NotificationSender", fields: [senderId], references: [id])
  receiverId String @db.ObjectId
  receiver User @relation("NotificationReceiver", fields: [receiverId], references: [id])
  readStatus Boolean @default(false)
  tripId String? @db.ObjectId
  trip Trip? @relation("TripNotifications", fields: [tripId], references: [id])
}

enum NotificationType {
  FRIEND_ACCEPT
  TRIP_ACCEPT
}

model Friendship {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sender User  @relation("friendRequestSent", fields: [senderID], references: [id])
  receiver    User     @relation("friendRequestReceived", fields: [receiverID], references: [id])
  receiverID  String   @db.ObjectId
  senderID  String   @db.ObjectId
  friendStatus    Status @default(PENDING)
  @@unique([receiverID, senderID])
}

enum Status {
  ACCEPTED
  PENDING
  REJECTED
}

model Activity {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  description String
  startTime DateTime
  endTime DateTime
  location Location
  notes String[]
  netUpvotes Int @default(0)
  isOnCalendar Boolean @default(false)
  category String[]
  tripId String @db.ObjectId
  trip Trip @relation(fields: [tripId], references: [id])
  image Photo?
}

type Photo {
  height Int?
  width  Int?
  url    String
}
